# PIPELINE DEFINITION
# Name: wine-quality-pipeline-with-hyperparameter-tuning
# Description: A pipeline to ingest, preprocess, tune hyperparameters, train, and test a model on the wine quality dataset.
components:
  comp-hyperparameter-tuning:
    executorLabel: exec-hyperparameter-tuning
    inputDefinitions:
      parameters:
        input_path:
          parameterType: STRING
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRUCT
  comp-ingest-data:
    executorLabel: exec-ingest-data
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRING
  comp-preprocess-data:
    executorLabel: exec-preprocess-data
    inputDefinitions:
      parameters:
        input_path:
          parameterType: STRING
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRING
  comp-test-model:
    executorLabel: exec-test-model
    inputDefinitions:
      artifacts:
        model_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRING
  comp-train-model:
    executorLabel: exec-train-model
    inputDefinitions:
      parameters:
        best_params:
          parameterType: STRUCT
        input_path:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        model_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-hyperparameter-tuning:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - hyperparameter_tuning
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.1'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef hyperparameter_tuning(input_path: str) -> dict:\n    import pandas\
          \ as pd\n    from sklearn.model_selection import train_test_split, GridSearchCV\n\
          \    from sklearn.linear_model import LogisticRegression\n\n    data = pd.read_csv(input_path)\n\
          \    X = data.drop('quality', axis=1)\n    y = data['quality']\n    X_train,\
          \ X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\
          \n    # Define the model\n    model = LogisticRegression()\n\n    # Define\
          \ the hyperparameters and their values\n    param_grid = {\n        'C':\
          \ [0.1, 1, 10],\n        'solver': ['liblinear', 'saga']\n    }\n\n    #\
          \ Perform grid search\n    grid_search = GridSearchCV(model, param_grid,\
          \ cv=5)\n    grid_search.fit(X_train, y_train)\n\n    # Get the best parameters\n\
          \    best_params = grid_search.best_params_\n    print(f\"Best parameters:\
          \ {best_params}\")\n\n    return best_params\n\n"
        image: kartikjena33/kfp:1.0.5
    exec-ingest-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - ingest_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.1'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef ingest_data() -> str:\n    import pandas as pd\n    import os\n\
          \n    url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv'\n\
          \    data = pd.read_csv(url, sep=';')\n    file_path = '/data/winequality.csv'\n\
          \    data.to_csv(file_path, index=False)\n\n    # Log file creation\n  \
          \  if os.path.exists(file_path):\n        print(f\"File created successfully:\
          \ {file_path}\")\n    else:\n        print(f\"Failed to create file: {file_path}\"\
          )\n\n    return file_path\n\n"
        image: kartikjena33/kfp:1.0.5
    exec-preprocess-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - preprocess_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.1'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef preprocess_data(input_path: str) -> str:\n    import pandas as\
          \ pd\n    import os\n\n    # Log file path\n    print(f\"Input file path:\
          \ {input_path}\")\n\n    if os.path.exists(input_path):\n        data =\
          \ pd.read_csv(input_path)\n\n        # Mean imputation\n        data.fillna(data.mean(),\
          \ inplace=True)\n\n        output_path = '/data/preprocessed_winequality.csv'\n\
          \        data.to_csv(output_path, index=False)\n        return output_path\n\
          \    else:\n        raise FileNotFoundError(f\"File not found: {input_path}\"\
          )\n\n"
        image: kartikjena33/kfp:1.0.5
    exec-test-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - test_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.1'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef test_model(model_path: dsl.Input[dsl.Artifact]) -> str:\n   \
          \ import pandas as pd\n    from sklearn.linear_model import LogisticRegression\n\
          \    from sklearn.metrics import accuracy_score\n    import joblib\n   \
          \ import os\n\n    # Load the model\n    model_filename = os.path.join(model_path.path,\
          \ 'winequality_model.pkl')\n    model = joblib.load(model_filename)\n\n\
          \    # Prepare test data\n    url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv'\n\
          \    data = pd.read_csv(url, sep=';')\n    X_test = data.drop('quality',\
          \ axis=1).sample(5)  # Sample 5 rows for testing\n    y_test = data['quality'].sample(5)\
          \  # Sample the corresponding labels\n\n    # Make predictions\n    y_pred\
          \ = model.predict(X_test)\n\n    # Compare predictions with actual labels\n\
          \    accuracy = accuracy_score(y_test, y_pred)\n    print(f\"Predictions:\
          \ {y_pred}\")\n    print(f\"Actual labels: {y_test.values}\")\n    print(f\"\
          Accuracy: {accuracy}\")\n\n    return \"Model testing completed.\"\n\n"
        image: kartikjena33/kfp:1.0.5
    exec-train-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.1'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_model(input_path: str, best_params: dict, model_path: dsl.Output[dsl.Artifact]):\n\
          \    import pandas as pd\n    from sklearn.model_selection import train_test_split\n\
          \    from sklearn.linear_model import LogisticRegression\n    from sklearn.metrics\
          \ import accuracy_score\n    import joblib\n    import os\n\n    data =\
          \ pd.read_csv(input_path)\n    X = data.drop('quality', axis=1)\n    y =\
          \ data['quality']\n    X_train, X_test, y_train, y_test = train_test_split(X,\
          \ y, test_size=0.2, random_state=42)\n\n    # Train the model with the best\
          \ parameters\n    model = LogisticRegression(**best_params)\n    model.fit(X_train,\
          \ y_train)\n    y_pred = model.predict(X_test)\n    accuracy = accuracy_score(y_test,\
          \ y_pred)\n    print(f'Model accuracy: {accuracy}')\n\n    # Specify the\
          \ filename for the model\n    model_filename = os.path.join(model_path.path,\
          \ 'winequality_model.pkl')\n\n    # Create the directory if it doesn't exist\n\
          \    os.makedirs(os.path.dirname(model_filename), exist_ok=True)\n\n   \
          \ joblib.dump(model, model_filename)\n    model_path.metadata['accuracy']\
          \ = accuracy\n\n"
        image: kartikjena33/kfp:1.0.5
pipelineInfo:
  description: A pipeline to ingest, preprocess, tune hyperparameters, train, and
    test a model on the wine quality dataset.
  name: wine-quality-pipeline-with-hyperparameter-tuning
root:
  dag:
    tasks:
      hyperparameter-tuning:
        cachingOptions: {}
        componentRef:
          name: comp-hyperparameter-tuning
        dependentTasks:
        - preprocess-data
        inputs:
          parameters:
            input_path:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: preprocess-data
        taskInfo:
          name: hyperparameter-tuning
      ingest-data:
        cachingOptions: {}
        componentRef:
          name: comp-ingest-data
        taskInfo:
          name: ingest-data
      preprocess-data:
        cachingOptions: {}
        componentRef:
          name: comp-preprocess-data
        dependentTasks:
        - ingest-data
        inputs:
          parameters:
            input_path:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: ingest-data
        taskInfo:
          name: preprocess-data
      test-model:
        cachingOptions: {}
        componentRef:
          name: comp-test-model
        dependentTasks:
        - train-model
        inputs:
          artifacts:
            model_path:
              taskOutputArtifact:
                outputArtifactKey: model_path
                producerTask: train-model
        taskInfo:
          name: test-model
      train-model:
        cachingOptions: {}
        componentRef:
          name: comp-train-model
        dependentTasks:
        - hyperparameter-tuning
        - preprocess-data
        inputs:
          parameters:
            best_params:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: hyperparameter-tuning
            input_path:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: preprocess-data
        taskInfo:
          name: train-model
schemaVersion: 2.1.0
sdkVersion: kfp-2.12.1
---
platforms:
  kubernetes:
    deploymentSpec:
      executors:
        exec-hyperparameter-tuning:
          pvcMount:
          - constant: my-pvc
            mountPath: /data
        exec-ingest-data:
          pvcMount:
          - constant: my-pvc
            mountPath: /data
        exec-preprocess-data:
          pvcMount:
          - constant: my-pvc
            mountPath: /data
        exec-test-model:
          pvcMount:
          - constant: my-pvc
            mountPath: /data
        exec-train-model:
          pvcMount:
          - constant: my-pvc
            mountPath: /data